{
    "id": 1040002,
    "name": "Spring Security CSRF Protection must not be disabled",
    "href": "AIP/quality-rules/1040002",
    "critical": true,
    "associatedValueName": "Single Value",
    "description": "Include Spring Security\u2019s CSRF protection within your application via XML or JAVA configuration is one of the most important step to secure your application. \nSome frameworks handle invalid CSRF tokens by invalidating the user\u2019s session, but this causes its own problems. Instead by default Spring Security\u2019s CSRF protection will produce an HTTP 403 access denied.\nThis rule reports violation when Spring Security\u2019s CSRF protection is deactivated. \nThis rule is compliant with CWE-352: Cross-Site Request Forgery (CSRF) ",
    "rationale": "When a web server is designed to receive a request from a client without any mechanism for verifying that it was intentionally sent, then it might be possible for an attacker to trick a client into making an unintentional request to the web server which will be treated as an authentic request. This can be done via a URL, image load, XMLHttpRequest, etc. and can result in exposure of data or unintended code execution. There multiple forms of Cross-Site Request Forgery (CSRF) attacks that can be avoided using Spring Security.",
    "reference": "https://cwe.mitre.org/data/definitions/352.html \nhttps://www.owasp.org/index.php/Top_10_2013-A8-Cross-Site_Request_Forgery_(CSRF)\nhttp://www.baeldung.com/spring-security-csrf \nhttps://docs.spring.io/spring-security/site/docs/current/reference/html/csrf.html#csrf-use-proper-verbs ",
    "remediationSample": "As of Spring Security 4.0, CSRF protection is enabled by default with XML configuration. \nhttp \n    csrf disabled=\"false\" \nhttp \n_____________ \nIn the older XML config (pre Spring Security 4), CSRF protection was disabled by default and we could enable it as follows: \n\n{code} \nhttp\n    ... \n    csrf\nhttp \n{code} \n  ",
    "sample": "As of Spring Security 4.0, CSRF protection is enabled by default with XML configuration. If you would like to disable CSRF protection, the corresponding XML configuration can be seen below.\nhttp\n    csrf disabled=\"true\"\nhttp\n------------------- \nIn the older XML config (pre Spring Security 4), CSRF protection was disabled by default. \n-------------------- \nJAVA Configuration : \n\n@EnableWebSecurity \npublic class WebSecurityConfig extends WebSecurityConfigurerAdapter { \n        @Override \n        protected void configure(HttpSecurity http) throws Exception { \n              http \n              .csrf().disable();     //CSRF Protection is disabled\n       } \n}\n ",
    "total": "Number of Java Artifact",
    "businessCriteria": [
        {
            "id": 66031,
            "name": "Programming Practices",
            "href": "AIP/business-criteria/66031"
        },
        {
            "id": 60016,
            "name": "Security",
            "href": "AIP/business-criteria/60016"
        }
    ],
    "technicalCriteria": [
        {
            "id": 66062,
            "name": "Secure Coding - Input Validation",
            "weight": 8,
            "critical": true
        }
    ],
    "technologies": [
        {
            "id": 140029,
            "name": "JEE",
            "href": "AIP/technologies/140029"
        }
    ],
    "qualityStandards": [
        
    ]
}
