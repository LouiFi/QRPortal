{
    "id": 1040006,
    "name": "Ensure that Content-Security-Policy is set for Spring Application",
    "href": "AIP/quality-rules/1040006",
    "critical": true,
    "associatedValueName": "Single Value",
    "description": "It is important to note that Spring Security does not add Content Security Policy by default. The web application author must declare the security policy(s) to enforce and/or monitor for the protected resources.\nThe rule reports violation when 'Content-Security-Policy' is not set. It's compliant with CWE-1021: Improper Restriction of Rendered UI Layers or Frames And Top 10-2017 A7-Cross-Site Scripting (XSS)",
    "rationale": " One way to help protect your site from XSS is to restrict the web domains where scripts can be served from, as is made possible by Content Security Policy (CSP) headers. CSP headers allow the server to instruct the browser to only accept content served from specific domains, e.g. safedomain.com. The 'Content-Security-Policy' header can restrict the source of all content served, or just specific content types, such as images, media and scripts. \n",
    "reference": "https://cwe.mitre.org/data/definitions/1021.html \nhttps://www.owasp.org/index.php/Top_10-2017_A7-Cross-Site_Scripting_(XSS)\n ",
    "remediationSample": "You can enable the CSP header using XML configuration with \"the content-security-policy\" element as shown below: \n\nhttp\n\n    headers \n     content-security-policy \n            policy-directives=\"script-src 'self' https://trustedscripts.example.com; object-src https://trustedplugins.example.com; report-uri /csp-report-endpoint/\" /> \n                                report-only=\"true\" /> // This enable the CSP 'report-only' header, \n    headers \n\nhttp \n-------------------------------------- \nSimilarly, you can enable the CSP header using Java configuration as shown below ( and enable the CSP 'report-only' header) \n\n@EnableWebSecurity \npublic class WebSecurityConfig extends WebSecurityConfigurerAdapter {   \n    @Override \n    protected void configure(HttpSecurity http) throws Exception { \n        http\n        .headers() \n        .contentSecurityPolicy(\"script-src 'self' https://trustedscripts.example.com; object-src https://trustedplugins.example.com; report-uri /csp-report-endpoint/\") //CSP is enabled\n        .reportOnly(); \n    } \n} \n  ",
    "sample": "The CSP header is not enabled in XML configuration or with JAVA configuration \nJAVA configuration: \n\n@EnableWebSecurity \npublic class WebSecurityConfig extends WebSecurityConfigurerAdapter { \n    @Override \n    protected void configure(HttpSecurity http) throws Exception { \n        http \n        .headers() // Content Security Policy is not enabled \n            .cacheControl() \n            .frameOptions(); \n\n    } \n} \n------------------------------------------------ \nXML Configuration: \n\nhttp\n    headers // Content Security Policy is not enabled \n        cache-control \n        content-type-options\n    headers \nhttp \n ",
    "total": "Number of Java Artifact",
    "businessCriteria": [
        {
            "id": 66031,
            "name": "Programming Practices",
            "href": "AIP/business-criteria/66031"
        },
        {
            "id": 60016,
            "name": "Security",
            "href": "AIP/business-criteria/60016"
        }
    ],
    "technicalCriteria": [
        {
            "id": 66062,
            "name": "Secure Coding - Input Validation",
            "weight": 7,
            "critical": true
        }
    ],
    "technologies": [
        {
            "id": 140029,
            "name": "JEE",
            "href": "AIP/technologies/140029"
        }
    ],
    "qualityStandards": [
        
    ]
}
