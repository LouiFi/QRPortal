{
    "id": 1040010,
    "name": "Cookies must be deleted during the logout",
    "href": "AIP/quality-rules/1040010",
    "critical": true,
    "associatedValueName": "Single Value",
    "description": "Logout is composed mainly of 2 steps:\n  1. Invalidate user session : indicate to web server that the session is not used anymore \n  2. Cancel cookie send by the web server to track user session. And also all cookies sent by web application, this, in order to have a global clean state \nThis rule reports violation when cookies are not cleaned during the Logout. ",
    "rationale": "When an actor claims to have a given identity, the software does not prove or insufficiently proves that the claim is correct. \nCookies should be removed when logging out to avoid this kind of risk ",
    "reference": "https://cwe.mitre.org/data/definitions/287.html \nhttps://www.owasp.org/index.php/Top_10-2017_A2-Broken_Authentication\n ",
    "remediationSample": "\n @Configuration \n @EnableWebSecurity \n public class LogoutSecurityConfig extends WebSecurityConfigurerAdapter {\n  \n                @Override \n                protected void configure(HttpSecurity http) throws Exception { \n                      http.authorizeRequests().antMatchers(\"/**\").hasRole(\"USER\").and().formLogin() \n                                    .and() \n                                    .logout().deleteCookies(\"remove\") // DELETE Cookies for logout. \n                                    .invalidateHttpSession(false) \n                     .logoutUrl(\"/custom-logout\") \n                                    .logoutSuccessUrl(\"/logout-success\"); \n                     } \n\n                @Override \n                 protected void configure(AuthenticationManagerBuilder auth) throws Exception { \n                        auth.inMemoryAuthentication().withUser(\"user\").password(\"password\").roles(\"USER\"); \n                     } \n} \n  ",
    "sample": "\n@Configuration \n @EnableWebSecurity \n public class LogoutSecurityConfig extends WebSecurityConfigurerAdapter { \n \n                @Override \n                protected void configure(HttpSecurity http) throws Exception { \n                      http.authorizeRequests().antMatchers(\"/**\").hasRole(\"USER\").and().formLogin() \n                                    .and() \n                                    .logout().invalidateHttpSession(true) // Cookies are not deleted during logout \n                      .logoutUrl(\"/custom-logout\") \n                                    .logoutSuccessUrl(\"/logout-success\"); \n                 } \n                \n                @Override \n                 protected void configure(AuthenticationManagerBuilder auth) throws Exception { \n                      auth.inMemoryAuthentication().withUser(\"user\").password(\"password\").roles(\"USER\"); \n                 \n                 } \n}               \n ",
    "total": "Number of Java Artifact",
    "businessCriteria": [
        {
            "id": 66031,
            "name": "Programming Practices",
            "href": "AIP/business-criteria/66031"
        },
        {
            "id": 60016,
            "name": "Security",
            "href": "AIP/business-criteria/60016"
        }
    ],
    "technicalCriteria": [
        {
            "id": 66062,
            "name": "Secure Coding - Input Validation",
            "weight": 8,
            "critical": true
        }
    ],
    "technologies": [
        {
            "id": 140029,
            "name": "JEE",
            "href": "AIP/technologies/140029"
        }
    ],
    "qualityStandards": [
        
    ]
}
