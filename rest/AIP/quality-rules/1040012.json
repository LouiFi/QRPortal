{
    "id": 1040012,
    "name": "Ensure that HTTP Session is invalidated during logout",
    "href": "AIP/quality-rules/1040012",
    "critical": true,
    "associatedValueName": "Single Value",
    "description": "Logout is composed of 2 steps: \n  1. Invalidate user session : indicate web server that the session is not used anymore.\n  2. Cancel cookie send by the web server to track user session. And also all cookies sent by web application, this, in order to have a global clean state. \nThis rule reports violation when Http session has not been invalidated during the Logout. ",
    "rationale": "Session sidejacking takes advantage of an unencrypted communication channel between a victim and target system. The attacker sniffs traffic on a network looking for session tokens in unencrypted traffic. Once a session token is captured, the attacker performs malicious actions by using the stolen token with the targeted application to impersonate the victim. This attack is a specific method of session hijacking, which is exploiting a valid session token to gain unauthorized access to a target system or information. Other methods to perform a session hijacking are session fixation, cross-site scripting, or compromising a user or server machine and stealing the session token.\n",
    "reference": "https://cwe.mitre.org/data/definitions/287.html \nhttps://www.owasp.org/index.php/Top_10-2017_A2-Broken_Authentication\n",
    "remediationSample": "\nprotected void configure(HttpSecurity http) throws Exception { \n      http \n          .logout() \n                 .logoutUrl(\"/my/logout\") \n                 .logoutSuccessUrl(\"/my/index\") \n                 .logoutSuccessHandler(logoutSuccessHandler) \n                 .invalidateHttpSession(true) // InvalidateHttpSession is set to TRUE \n                 ... \n                 .and() \n             ... \n} \n  ",
    "sample": "\nprotected void configure(HttpSecurity http) throws Exception { \n      http \n          .logout() \n                     .logoutUrl(\"/my/logout\") \n                     .logoutSuccessUrl(\"/my/index\") \n                     .logoutSuccessHandler(logoutSuccessHandler) \n                     .invalidateHttpSession(false) // InvalidateHttpSession is set to FALSE \n                     ... \n                     .and() \n             ... \n} \n---------------- \nprotected void configure(HttpSecurity http) throws Exception { \n      http \n          .logout() \n                     .logoutUrl(\"/my/logout\") \n                     .logoutSuccessUrl(\"/my/index\") \n                     .logoutSuccessHandler(logoutSuccessHandler) \n                                                           \n                     ... \n                     // InvalidateHttpSession is missing \n                     .and() \n             ... \n}\n ",
    "total": "Number of Java Artifact",
    "businessCriteria": [
        {
            "id": 66031,
            "name": "Programming Practices",
            "href": "AIP/business-criteria/66031"
        },
        {
            "id": 60016,
            "name": "Security",
            "href": "AIP/business-criteria/60016"
        }
    ],
    "technicalCriteria": [
        {
            "id": 66062,
            "name": "Secure Coding - Input Validation",
            "weight": 8,
            "critical": true
        }
    ],
    "technologies": [
        {
            "id": 140029,
            "name": "JEE",
            "href": "AIP/technologies/140029"
        }
    ],
    "qualityStandards": [
        
    ]
}
