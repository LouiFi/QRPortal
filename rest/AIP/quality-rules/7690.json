{
    "id": 7690,
    "name": "Avoid unchecked return code (SQLCODE) after EXEC SQL query",
    "href": "AIP/quality-rules/7690",
    "critical": true,
    "associatedValueName": "Number of unchecked return codes",
    "description": "This rule searches for COBOL programs that access relational databases without checking the SQLCODE return code after SQL queries in the same paragraph. SQL queries containing following verbs are checked: SELECT, INSERT, UPDATE, DELETE, OPEN, and FETCH. \n\nThe rule checks the following cases: \n\nCase 1: direct check \n\nEXEC SQL ... END-EXEC \n\nIF SQLCODE = xxx \nEND-IF \n\nCase 2: indirect check with variable \n\nEXEC SQL ... END-EXEC \n\nMOVE SQLCODE TO VAR. \n\nIF VAR = xxx \nEND-IF \n\nCase 3: indirect check with 88-level items \n\n01 VAR PIC 999. \n88 VAL100 VALUE 100. \n....... \nEXEC SQL ... END-EXEC \n\nMOVE SQLCODE TO VAR. \n\nIF VAL100 \nEND-IF \n\nNote: \"MOVE SQLxxx TO VAR\" and DISPLAY statements can be inserted between the SQL query and the return code check. \n\nRule should not consider the below case as violation :\n\nWhen SQLCODE check is happening immediately after the execution of SQL query using another section ( using perform statement).",
    "output": "Associated to each COBOL Program with violations, the Quality Rule provides: \n\n- The number of unchecked return codes \n- Bookmarks for violation patterns found in source code: \n  - EXEC SQL query that is not followed by a test of SQLCODE",
    "rationale": "SQL statements can throw warnings and errors. It is therefore important to check their return code before executing other statements in order to avoid data corruption and program malfunction. Furthermore, the SQL query and its associated return code check should be located in the same paragraph in order to allow developers to be sure a check is implemented and to quickly identify which actions are performed in terms of error management.",
    "reference": "IBM Enterprise Cobol for z/OS - Programming Guide",
    "remediation": "Check the value of the SQLCODE variable after each database access action in the PROCEDURE DIVISION. Then take any necessary action.",
    "remediationSample": "EXEC SQL \n  SELECT ACT_NO, EENDDATE \n  INTO :ACT-NO, :EENDDATE \n  FROM MP_PROJ_ACT \n  WHERE PROJ_NO = :WS-PROJ-NO \nEND-EXEC \n\nEVALUATE SQLCODE \n    WHEN 0 \n         CONTINUE \n    WHEN OTHER \n         PERFORM 950-DBERROR \nEND-EVALUATE \n\nMOVE ACT-NO TO OTHER-VAR",
    "sample": "EXEC SQL \n  SELECT ACT_NO, EENDDATE \n  INTO :ACT-NO, :EENDDATE \n  FROM MP_PROJ_ACT \n  WHERE PROJ_NO = :WS-PROJ-NO \nEND-EXEC \n\nMOVE ACT-NO TO OTHER-VAR",
    "total": "Number of Cobol Programs embedding SQL",
    "businessCriteria": [
        {
            "id": 20140522,
            "name": "Green Stuff",
            "href": "AIP/business-criteria/20140522"
        },
        {
            "id": 66031,
            "name": "Programming Practices",
            "href": "AIP/business-criteria/66031"
        },
        {
            "id": 60013,
            "name": "Robustness",
            "href": "AIP/business-criteria/60013"
        },
        {
            "id": 60016,
            "name": "Security",
            "href": "AIP/business-criteria/60016"
        }
    ],
    "technicalCriteria": [
        {
            "id": 61014,
            "name": "Programming Practices - Error and Exception Handling",
            "weight": 8,
            "critical": true
        }
    ],
    "technologies": [
        {
            "id": -4,
            "name": "Cobol",
            "href": "AIP/technologies/-4"
        }
    ],
    "qualityStandards": [
        
    ]
}
