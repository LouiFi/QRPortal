{
    "id": 1039014,
    "name": "Avoid using Cipher with no HMAC to ensure data integrity",
    "href": "AIP/quality-rules/1039014",
    "critical": true,
    "associatedValueName": "Single Value",
    "description": "The ciphertext produced is susceptible to alteration by an adversary. This mean that the cipher provides no way to detect that the data has been tampered with. If the ciphertext can be controlled by an attacker, it could be altered without detection. \n\nThe solution is to used a cipher that includes a Hash based Message Authentication Code (HMAC) to sign the data. \nAs following modes don't provide a HMAC, a violation will be reported when one of them is used. \n- CBC \n- OFB \n- CTR \n- ECB ",
    "output": "This report lists all artifacts with JAVA methods",
    "rationale": "If integrity check values or \"checksums\" are omitted from a protocol, there is no way of determining if data has been corrupted in transmission. The lack of checksum functionality in a protocol removes the first application-level check of data that can be used. The end-to-end philosophy of checks states that integrity checks should be performed at the lowest level that they can be completely implemented. \n\nSo using a cipher that includes a Hash based Message Authentication Code (HMAC) to sign the data will ensure data integrity. It is always recommended that you be able to verify the HMAC first, and only if the data is unmodified, do you then perform any cryptographic functions on the data.",
    "reference": "http://cwe.mitre.org/data/definitions/353.html",
    "remediation": "Only uses mode introduceing an HMAC into the resulting encrypted data, providing integrity of the result as GCM.",
    "remediationSample": "Cipher c = Cipher.getInstance(\"AES/GCM/NoPadding\"); \nc.init(Cipher.ENCRYPT_MODE, k, iv); \nbyte[] cipherText = c.doFinal(plainText);",
    "sample": "AES in CBC mode \nCipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\"); \nc.init(Cipher.ENCRYPT_MODE, k, iv); \nbyte[] cipherText = c.doFinal(plainText); \n",
    "total": "Number of Java Artifact",
    "businessCriteria": [
        {
            "id": 20140522,
            "name": "Green Stuff",
            "href": "AIP/business-criteria/20140522"
        },
        {
            "id": 60016,
            "name": "Security",
            "href": "AIP/business-criteria/60016"
        }
    ],
    "technicalCriteria": [
        {
            "id": 66064,
            "name": "Secure Coding - Weak Security Features",
            "weight": 8,
            "critical": true
        }
    ],
    "technologies": [
        {
            "id": 140029,
            "name": "JEE",
            "href": "AIP/technologies/140029"
        }
    ],
    "qualityStandards": [
        
    ]
}
