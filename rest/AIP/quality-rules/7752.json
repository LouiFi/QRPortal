{
    "id": 7752,
    "name": "CWE-73: Avoid file path manipulation vulnerabilities",
    "href": "AIP/quality-rules/7752",
    "critical": true,
    "associatedValueName": "Call stack from user input source down to the target file path command method",
    "description": "Using CAST dataflow engine, this metric detects execution paths from user input methods down to file creation methods, paths which are open vulnerabilities to Operating System injection flaws. \n\n The list of user input methods can be customized as well as the target methods and the sanitization methods (methods encoding the user input to avoid hacks).",
    "output": "List all methods that miss calling the required input validation calls\n\nIt provides the following information:\n - Method full name\n - Call stack from user input source down to the target file path command method.",
    "rationale": "In web based applications, the validation of all user input is critical to avoid major security problems that would come from the Injection flaws.\n\nTo avoid the creation of Injection flaws, the Open Web Application Security Project (OWASP) recommends the validation of all user input :\n\"Use a standard input validation mechanism to validate all input data for length, type, syntax, and business rules before accepting the data to be displayed or stored. Use an \"accept known good\" validation strategy. Reject invalid input rather than attempting to sanitize potentially hostile data. Do not forget that error messages might also include invalid data\"\n\nThe Common Weakness Enumeration defines Improper Input Validation ( CWE-20 ) as follows :\n\n\"When software does not validate input properly, an attacker is able to craft the input in a form that is not expected by the rest of the application. This will lead to parts of the system receiving unintended input, which may result in altered control flow, arbitrary control of a resource, or arbitrary code execution.\"\n\nThis rule ensures that the appropriate input validation is coded within the same method that called the user input call, making security checking easier for all team members.",
    "reference": "CWE-73 : External Control of File Name or Path\nhttp://cwe.mitre.org/data/definitions/73.html\nhttp://cwe.mitre.org/data/definitions/434.html\n\nOpen Web Application Security Project (OWASP) \nhttp://www.owasp.org/index.php/Top_10_2007\n\nCISQ: ASCSM-CWE-078",
    "remediation": "Validate all the user inputs.",
    "total": "The number of methods calling user input methods",
    "businessCriteria": [
        {
            "id": 66031,
            "name": "Programming Practices",
            "href": "AIP/business-criteria/66031"
        },
        {
            "id": 60016,
            "name": "Security",
            "href": "AIP/business-criteria/60016"
        }
    ],
    "technicalCriteria": [
        {
            "id": 66062,
            "name": "Secure Coding - Input Validation",
            "weight": 9,
            "critical": true
        }
    ],
    "technologies": [
        {
            "id": 138383,
            "name": "C#",
            "href": "AIP/technologies/138383"
        },
        {
            "id": 140029,
            "name": "JEE",
            "href": "AIP/technologies/140029"
        },
        {
            "id": 138385,
            "name": "VB.NET",
            "href": "AIP/technologies/138385"
        }
    ],
    "qualityStandards": [
        {
            "standard": "AIP",
            "id": "AIP-GDPR",
            "name": "General Data Protection Regulation",
            "url": null,
            "description": null
        },
        {
            "standard": "CISQ",
            "id": "ASCSM-CWE-22",
            "name": "Path Traversal Improper Input Neutralization",
            "url": null,
            "description": null
        },
        {
            "standard": "CISQ",
            "id": "ASCSM-CWE-78",
            "name": "OS Command Injection Improper Input Neutralization",
            "url": null,
            "description": null
        },
        {
            "standard": "CWE",
            "id": "CWE-73",
            "name": "External Control of File Name or Path",
            "url": "https://cwe.mitre.org/data/definitions/73.html",
            "description": null
        },
        {
            "standard": "OWASP",
            "id": "A9-2017",
            "name": "Using Components with Known Vulnerabilities",
            "url": "https://www.owasp.org/index.php/Top_10-2017_A9-Using_Components_with_Known_Vulnerabilities",
            "description": "Components, such as libraries, frameworks, and other software modules, run with the same privileges as the application. If a vulnerable component is exploited, such an attack can facilitate serious data loss or server takeover. Applications and APIs using components with known vulnerabilities may undermine application defenses and enable various attacks and impacts."
        }
    ]
}
