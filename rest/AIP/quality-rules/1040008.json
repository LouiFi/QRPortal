{
    "id": 1040008,
    "name": "Ensure that login form is declared after requesting authorization and authentication",
    "href": "AIP/quality-rules/1040008",
    "critical": true,
    "associatedValueName": "Single Value",
    "description": "Since Spring Security\u2019s default configuration does not explicitly set a URL for the login page, Spring Security generates one automatically, based on the features that are enabled and using standard values for the URL which processes the submitted login, the default target URL the user will be sent to after logging in and so on. \nWhile the automatically generated log in page is convenient to get up and running quickly, most applications will want to provide their own log in page. but this should be done after requesting authorization and authentication.\nThis rule reports violation when login form is set without requesting authorization and authentication. It is compliant with CWE-287: Improper Authentication and Top 10-2017 A5-Broken Access Control",
    "rationale": "When an actor claims to have a given identity, the software does not prove or insufficiently proves that the claim is correct. Based on \"authorizeRequests()\", we are allowing anonymous access on /login so that users can authenticate. We are also securing everything else.\n",
    "reference": "https://cwe.mitre.org/data/definitions/287.html \nhttps://www.owasp.org/index.php/Top_10-2017_A2-Broken_Authentication\n ",
    "remediationSample": "\nprotected void configure(HttpSecurity http) throws Exception { \n    http \n         .authorizeRequests() \n                  .anyRequest().authenticated() \n                   .and() \n         .formLogin()    //Login form is declared after authentication and authorization\n                  .loginPage(\"/login\") \n                  .permitAll();\n} \n  ",
    "sample": "\nprotected void configure(HttpSecurity http) throws Exception { \n    http \n        .formLogin()   //Login form is declared without authentication and authorization\n             .loginPage(\"/login\") \n             .permitAll();\n} \n ",
    "total": "Number of Java Artifact",
    "businessCriteria": [
        {
            "id": 66031,
            "name": "Programming Practices",
            "href": "AIP/business-criteria/66031"
        },
        {
            "id": 60016,
            "name": "Security",
            "href": "AIP/business-criteria/60016"
        }
    ],
    "technicalCriteria": [
        {
            "id": 66062,
            "name": "Secure Coding - Input Validation",
            "weight": 8,
            "critical": true
        }
    ],
    "technologies": [
        {
            "id": 140029,
            "name": "JEE",
            "href": "AIP/technologies/140029"
        }
    ],
    "qualityStandards": [
        
    ]
}
