{
    "id": 8238,
    "name": "CWE-501: Trust boundary violation",
    "href": "AIP/quality-rules/8238",
    "critical": true,
    "associatedValueName": "Call stack from a method receiving untrusted data down to a target method",
    "description": "The product mixes trusted and untrusted data in the same data structure or structured message. \n\nThe list of user input methods can be customized as well as the output method and the sanitization methods.",
    "output": "List all methods that miss calling the required sanitization method and provides access to the path demonstrating the vulnerability : \n  \nIt provides the following information: \n- The full name of the method that calls the user input method. That is the source of the untrusted data. \n- Call stack from user input source down to the target method.",
    "rationale": "Without well-established and maintained trust boundaries, programmers will inevitably lose track of which pieces of data have been validated and which have not. This confusion will eventually allow some data to be used without first being validated.",
    "reference": "http://cwe.mitre.org/data/definitions/501.html",
    "remediation": "Perform input data validation before storing or transmitting the data.",
    "sample": "Java :\nusrname = request.getParameter(\"usrname\"); \nif (session.getAttribute(ATTR_USR) == null) { \n    session.setAttribute(ATTR_USR, usrname); \n} \n\nC# :\nusrname = request.Item(\"usrname\"); \nif (session.Item(ATTR_USR) == null) { \n    session.Add(ATTR_USR, usrname); \n}",
    "total": "The number of methods calling user input methods",
    "businessCriteria": [
        {
            "id": 66031,
            "name": "Programming Practices",
            "href": "AIP/business-criteria/66031"
        },
        {
            "id": 60016,
            "name": "Security",
            "href": "AIP/business-criteria/60016"
        }
    ],
    "technicalCriteria": [
        {
            "id": 66062,
            "name": "Secure Coding - Input Validation",
            "weight": 9,
            "critical": true
        }
    ],
    "technologies": [
        {
            "id": 138383,
            "name": "C#",
            "href": "AIP/technologies/138383"
        },
        {
            "id": 140029,
            "name": "JEE",
            "href": "AIP/technologies/140029"
        },
        {
            "id": 138385,
            "name": "VB.NET",
            "href": "AIP/technologies/138385"
        }
    ],
    "qualityStandards": [
        {
            "standard": "AIP",
            "id": "AIP-GDPR",
            "name": "General Data Protection Regulation",
            "url": null,
            "description": null
        },
        {
            "standard": "CWE",
            "id": "CWE-501",
            "name": "Trust Boundary Violation",
            "url": "https://cwe.mitre.org/data/definitions/501.html",
            "description": null
        },
        {
            "standard": "OWASP",
            "id": "A3-2017",
            "name": "Sensitive Data Exposure",
            "url": "https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure",
            "description": "Many web applications and APIs do not properly protect sensitive data, such as financial, healthcare, and PII. Attackers may steal or modify such weakly protected data to conduct credit card fraud, identity theft, or other crimes. Sensitive data may be compromised without extra protection, such as encryption at rest or in transit, and requires special precautions when exchanged with the browser."
        }
    ]
}
